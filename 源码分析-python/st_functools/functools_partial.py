"""
迭代器: 迭代器是一个表示数据流的对象(不是一次性返回所有的数据)；这个对象每次只返回一个元素。
    Python 迭代器必须支持 __next__() 方法；这个方法不接受参数，并总是返回数据流中的下一个元素。
    如果数据流中没有元素，__next__() 会抛出 StopIteration 异常。迭代器未必是有限的；完全有理由构造一个输出无限数据流的迭代器。
生成器: 任何包含了 yield 关键字的函数都是生成器函数；Python 的 bytecode 编译器会在编译的时候检测到并因此而特殊处理。
    当你调用一个生成器函数，它并不会返回单独的值，而是返回一个支持生成器协议的生成器对象。
    当执行 yield 表达式时，生成器会输出 i 的值，就像 return 表达式一样。
    yield 和 return 最大的区别在于，到达 yield 的时候生成器的执行状态会挂起并保留局部变量。
    在下一次调用生成器 __next__() 方法的时候，函数会恢复执行。
"""